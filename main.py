

from keep_alive import keep_alive
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update
from telegram.ext import Application, ContextTypes
import logging
from telegram.ext import MessageHandler, filters
from telegram import Update
from telegram.ext import Application, ContextTypes, MessageHandler, filters

# async def get_custom_emoji_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     if update.message and update.message.entities:
#         for entity in update.message.entities:
#             if entity.type == "custom_emoji":
#                 await update.message.reply_text(
#                     f"üÜî Emoji ID: `{entity.custom_emoji_id}`",
#                     parse_mode="Markdown"
#                 )     


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –¢–≤—ñ–π chat_id (–∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π)
CHAT_ID = '-1001964846494'
TEXT_1 = """ 
üî•  –õ–µ–¥—ñ —Ç–∞ –î–∂–µ–Ω—Ç–ª—å–º–µ–Ω–∏! üî•
üíé –ö–∞—Å–∏—Ä –ü–æ–ª—ñ–Ω–∞ –Ω–∞ –∑–≤'—è–∑–∫—É! üíé
‚ö° –†–µ–∫–≤—ñ–∑–∏—Ç–∏ —Ç—É—Ç ‚Äî @KaSSa_4444! ‚ö°
 """

TEXT_2 = """ 
üéÅ –©–û–î–ï–ù–ù–ò–ô –ë–û–ù–£–°! üé≤

–ü–æ–ø–æ–≤–Ω–∏–≤ —Ä–∞—Ö—É–Ω–æ–∫? –õ–æ–≤–∏ —à–∞–Ω—Å –Ω–∞ –ø—Ä–∏—î–º–Ω–∏–π —Å—é—Ä–ø—Ä–∏–∑!

–û–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –¥–µ–ø–æ–∑–∏—Ç—É ‚Äî –ø–µ—Ä–µ—Ö–æ–¥—å —É —á–∞—Ç —ñ–∑ –∫–∞—Å–∏—Ä–æ–º —Ç–∞ –∫–∏–¥–∞–π –∫—É–±–∏–∫ —É–¥–∞—á—ñ!

üîπ 1‚Äì3 ‚Äî –µ—Ö, —Å–ø—Ä–æ–±–∞ –±—É–ª–∞ –Ω–µ–≤–¥–∞–ª–æ—é üò¢

üîπ 4‚Äì6 ‚Äî –í–Ü–¢–ê–Ñ–ú–û! üéâ –¢–≤—ñ–π –±–æ–Ω—É—Å ‚Äî 50 –≥—Ä–Ω –¥–æ –¥–µ–ø–æ–∑–∏—Ç—É ! üí∏

‚ùóÔ∏è –ë–æ–Ω—É—Å–Ω—ñ –≥—Ä–æ—à—ñ –≤—ñ–¥–Ω—ñ–º–∞—é—Ç—å—Å—è –ø—Ä–∏ –≤–∏–≤–æ–¥—ñ.
 """

TEXT_3 = """ 
üîê –°–ï–ô–§ ‚Äî –ì—Ä–æ—à–æ–≤–∏–π –∫–≤–µ—Å—Ç –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è! üí•
 
‚ö°Ô∏è –£ –Ω–∞—Å —î –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π —Å–µ–π—Ñ, —É —è–∫–æ–º—É –∑–∞—Ö–æ–≤–∞–Ω–∏–π –≥—Ä–æ—à–æ–≤–∏–π –ø—Ä–∏–∑:

 üëª 2Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£ –≥—Ä–Ω 

üî∏–ì—Ä–∞–π –Ω–∞ –Ω–∞—à–∏—Ö —Å–ª–æ—Ç–∞—Ö —Ç–∞ –≤–ø—ñ–π–º–∞–π –±–æ–Ω—É—Å 2Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£ –≥—Ä–Ω.

üî∏–°–∫–∏–Ω—å —Å–∫—Ä—ñ–Ω –≤–∏–≥—Ä–∞—à—É –≤ –≥—Ä—É–ø—É —Ç–∞ –æ–±–µ—Ä–∏ —Å–≤—ñ–π —â–∞—Å–ª–∏–≤–∏–π –Ω–æ–º–µ—Ä.
 """

TEXT_4 = """ 
üîÅ –û–¢–†–ò–ú–ê–ô –í–Ü–î–ö–ê–¢ 10% üíµ


üéØ –ì—Ä–∞—î—à –Ω–∞ –≤–µ–ª–∏–∫—ñ —Å—Ç–∞–≤–∫–∏? –ú–∏ –¥–±–∞—î–º–æ –ø—Ä–æ —Ç–≤–æ—é —É–¥–∞—á—É!

üí∞ –û—Ç—Ä–∏–º–∞–π 10% –∫–µ—à–±–µ–∫, —è–∫—â–æ –∑—Ä–æ–±–∏–≤ –¥–µ–ø–æ–∑–∏—Ç –≤—ñ–¥ 1Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£ –≥—Ä–Ω

 üìÜ –†–∞—Ö—É—î—Ç—å—Å—è —â–æ–¥–Ω—è ‚Äî —à–∞–Ω—Å –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —á–∞—Å—Ç–∏–Ω—É –π —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑!
 """

TEXT_5 = """ 
üé∞ –ë–û–ù–£–° –ù–ê SUPEROMATIC! üí∏


üî• –ë–æ–Ω—É—Å –¥–æ–¥–∞—î—Ç—å—Å—è –Ω–∞ –∫–æ–∂–µ–Ω –¥–µ–ø–æ–∑–∏—Ç –≤—ñ–¥ 300 –≥—Ä–Ω

üìÖ –ü–Ω ‚Äì –ß—Ç ‚Äî –æ—Ç—Ä–∏–º—É–π +10% –¥–æ –¥–µ–ø–æ–∑–∏—Ç—É

üìÖ –ü—Ç ‚Äì –ù–¥ ‚Äî –≤–∂–µ +20% –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫!

üí• –õ–æ–≤–∏ –≤–∏–≥—Ä–∞—à, –ø–æ–∫–∏ –≥–∞—Ä—è—á–µ ‚Äî Superomatic –∑–∞—Ä—è–¥–∂–µ–Ω–∏–π –Ω–∞ —Ñ–æ—Ä—Ç—É–Ω—É! üçÄ

üí≥ –ë–æ–Ω—É—Å –Ω–∞—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É‚ùóÔ∏è –ü—Ä–∏ –≤–∏–≤–æ–¥—ñ –±–æ–Ω—É—Å–∏ –≤—ñ–¥–Ω—ñ–º–∞—é—Ç—å—Å—è‚ùóÔ∏è
"""

TEXT_6 = """ 

 """

TEXT_7 = """ 

 """




# @application.message()
async def get_custom_emoji_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.entities:
        for entity in update.message.entities:
            if entity.type == "custom_emoji":
                await update.message.reply_text(f"üÜî Emoji ID: `{entity.custom_emoji_id}`")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def send_daily_message(application: Application):
   
    await application.bot.send_message(chat_id=CHAT_ID, text=TEXT_1 )

async def send_daily_message2(application: Application):
   
    await application.bot.send_message(chat_id=CHAT_ID, text=TEXT_2 )

async def send_daily_message3(application: Application):
   
    await application.bot.send_message(chat_id=CHAT_ID, text=TEXT_3 )    

async def send_daily_message4(application: Application):
   
    await application.bot.send_message(chat_id=CHAT_ID, text=TEXT_4 )

async def send_daily_message5(application: Application):
   
    await application.bot.send_message(chat_id=CHAT_ID, text=TEXT_5 )

async def send_daily_message6(application: Application):
   
    await application.bot.send_message(chat_id=CHAT_ID, text=TEXT_3 )

async def send_daily_message7(application: Application):
   
    await application.bot.send_message(chat_id=CHAT_ID, text=TEXT_2 )

async def send_daily_message8(application: Application):
   
    await application.bot.send_message(chat_id=CHAT_ID, text=TEXT_4 )

# async def send_daily_message9(application: Application):
   
#     await application.bot.send_message(chat_id=CHAT_ID, text=TEXT_2 )

# async def send_daily_message10(application: Application):
   
#     await application.bot.send_message(chat_id=CHAT_ID, text=TEXT_2 )


# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main():
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É –±–æ—Ç–∞
    keep_alive()
    application = Application.builder().token("7688368621:AAFoSxcstDmbp9hhuxbDk2bvkS01KXrsz2U").build()

    scheduler = AsyncIOScheduler(timezone="Europe/Kyiv")
 
    scheduler.add_job(send_daily_message, trigger="cron", hour=10, minute=00, args=[application])
    scheduler.add_job(send_daily_message2, trigger="cron", hour=11, minute=00, args=[application])
    scheduler.add_job(send_daily_message3, trigger="cron", hour=12, minute=00, args=[application])
    scheduler.add_job(send_daily_message4, trigger="cron", hour=15, minute=00, args=[application])
    scheduler.add_job(send_daily_message5, trigger="cron", hour=18, minute=00, args=[application])
    scheduler.add_job(send_daily_message6, trigger="cron", hour=19, minute=00, args=[application])
    scheduler.add_job(send_daily_message7, trigger="cron", hour=20, minute=00, args=[application])
    scheduler.add_job(send_daily_message8, trigger="cron", hour=21, minute=00, args=[application])
    # scheduler.add_job(send_daily_message9, trigger="cron", hour=21, minute=00, args=[application])
    # scheduler.add_job(send_daily_message10, trigger="cron", hour=21, minute=00, args=[application])

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
    await application.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()  # –î–æ–¥–∞—Ç–∫–æ–≤–æ –¥–ª—è –∑–∞–ø—É—Å–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á –≤ Jupyter —á–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞—Ö –∑ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ —Ü–∏–∫–ª—ñ—á–Ω–∏–º–∏ –ø–æ–¥—ñ—è–º–∏
    import asyncio
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
